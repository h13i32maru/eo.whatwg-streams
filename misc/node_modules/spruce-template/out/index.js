"use strict";

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var jsdom = require("jsdom");
jsdom.defaultDocumentFeatures = {
  FetchExternalResources: [],
  ProcessExternalResources: false
};

var SpruceTemplate = (function () {
  function SpruceTemplate(html) {
    _classCallCheck(this, SpruceTemplate);

    if (typeof html === "string") {
      this._doc = jsdom.jsdom(html);
      this._isFragment = html.indexOf("<html>") === -1;
    } else if (typeof html === "object" && "outerHTML" in html) {
      this._doc = html;
      this._isFragment = html.outerHTML.indexOf("<html>") === -1;
    }
  }

  _prototypeProperties(SpruceTemplate, null, {
    _nodes: {
      value: function _nodes(id) {
        if (!this._doc) {
          throw new Error("can not operation after take().");
        }

        if (!id) {
          return [];
        }

        var nodes = this._doc.querySelectorAll("[data-s=\"" + id + "\"]");
        return this._filter(nodes);
      },
      writable: true,
      configurable: true
    },
    _filter: {
      value: function _filter(nodes) {
        var results = [];
        for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          var target = node;
          while (target = target.parentElement) {
            if (target.hasAttribute("data-s-loaded")) {
              break;
            }
          }

          if (!target) {
            results.push(node);
          }
        }

        return results;
      },
      writable: true,
      configurable: true
    },
    text: {
      value: function text(id, value) {
        var nodes = this._nodes(id);
        for (var _iterator = nodes[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
          var node = _step.value;
          node.textContent = value;
        }
        return this;
      },
      writable: true,
      configurable: true
    },
    attr: {
      value: function attr(id, key, value) {
        var nodes = this._nodes(id);
        for (var _iterator = nodes[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
          var node = _step.value;
          node.setAttribute(key, value);
        }
        return this;
      },
      writable: true,
      configurable: true
    },
    loop: {
      value: function loop(id, values, callback) {
        var nodes = this._nodes(id);
        for (var _iterator = nodes[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
          var node = _step.value;
          var parent = node.parentElement;
          parent.removeChild(node);
          for (var j = 0; j < values.length; j++) {
            var clonedNode = node.cloneNode(true);
            var spruce = new SpruceTemplate(clonedNode);
            callback(j, values[j], spruce);
            parent.appendChild(clonedNode);
            var textNode = this._doc.createTextNode("\n");
            parent.appendChild(textNode);
          }
        }

        return this;
      },
      writable: true,
      configurable: true
    },
    hide: {
      value: function hide(id) {
        var isHide = arguments[1] === undefined ? true : arguments[1];
        var nodes = this._nodes(id);
        for (var _iterator = nodes[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
          var node = _step.value;
          if (isHide) {
            node.style.display = "none";
          } else {
            node.style.display = null;
          }
        }
        return this;
      },
      writable: true,
      configurable: true
    },
    show: {
      value: function show(id) {
        var isShow = arguments[1] === undefined ? true : arguments[1];
        return this.hide(id, !isShow);
      },
      writable: true,
      configurable: true
    },
    drop: {
      value: function drop(id) {
        var isDrop = arguments[1] === undefined ? true : arguments[1];
        if (!isDrop) return;

        var nodes = this._nodes(id);
        for (var _iterator = nodes[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
          var node = _step.value;
          node.parentElement.removeChild(node);
        }

        return this;
      },
      writable: true,
      configurable: true
    },
    load: {
      value: function load(id, spruceTemplate) {
        var html;
        if (spruceTemplate instanceof SpruceTemplate) {
          html = spruceTemplate._doc.body.innerHTML;
        } else {
          html = spruceTemplate.toString();
        }

        var nodes = this._nodes(id);
        for (var _iterator = nodes[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
          var node = _step.value;
          node.setAttribute("data-s-loaded", 1);
          node.textContent = "";
          node.innerHTML = html;
        }
      },
      writable: true,
      configurable: true
    },
    close: {
      value: function close() {
        this._html = this.html;
        this._doc.parentWindow.close();
        this._doc = null;
        return this;
      },
      writable: true,
      configurable: true
    },
    html: {
      get: function () {
        if (!this._doc) return this._html;

        var nodes = this._doc.querySelectorAll("[data-s-loaded=\"1\"]");
        for (var i = 0; i < nodes.length; i++) {
          nodes[i].removeAttribute("data-s-loaded");
        }

        if (this._isFragment) {
          var html = this._doc.body.innerHTML;
        } else {
          var html = this._doc.body.parentElement.outerHTML;
        }

        for (var i = 0; i < nodes.length; i++) {
          nodes[i].setAttribute("data-s-loaded", 1);
        }

        return html;
      },
      configurable: true
    }
  });

  return SpruceTemplate;
})();

module.exports = SpruceTemplate;


//var fs = require('fs');
//var html = fs.readFileSync('sample.html', {encoding: 'utf-8'});
//
//var values = [{name: 'a', age: 12}, {name: 'b', age: 20}, {name: 'c', age: 30}];
//var s = new SpruceTemplate(html);
//s.text('title', 'Alice');
//s.attr('title', 'href', 'http://hoge.com');
//s.hide('title').show('title');
//s.load('title', new SpruceTemplate(html));
//s.loop('names', values, (i, v, s)=> s.text('name', v.name).text('age', v.age));
//console.log(s.take());
