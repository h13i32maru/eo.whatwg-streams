var jsdom = require("jsdom");
jsdom.defaultDocumentFeatures = {
  FetchExternalResources: [],
  ProcessExternalResources: false
};

export default class SpruceTemplate {
  constructor(html) {
    if (typeof html === 'string') {
      this._doc = jsdom.jsdom(html);
      this._isFragment = html.indexOf('<html>') === -1;
    } else if (typeof html === 'object' && 'outerHTML' in html) {
      this._doc = html;
      this._isFragment = html.outerHTML.indexOf('<html>') === -1;
    }
  }

  _nodes(id) {
    if (!this._doc) {
      throw new Error('can not operation after take().');
    }

    if (!id) {
      return [];
    }

    var nodes = this._doc.querySelectorAll(`[data-s="${id}"]`);
    return this._filter(nodes);
  }

  _filter(nodes) {
    var results = [];
    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      var target = node;
      while(target = target.parentElement) {
        if (target.hasAttribute('data-s-loaded')) {
          break;
        }
      }

      if (!target) {
        results.push(node);
      }
    }

    return results;
  }

  text(id, value) {
    var nodes = this._nodes(id);
    for (var node of nodes) {
      node.textContent = value;
    }
    return this;
  }

  attr(id, key, value) {
    var nodes = this._nodes(id);
    for (var node of nodes) {
      node.setAttribute(key, value);
    }
    return this;
  }

  loop(id, values, callback) {
    var nodes = this._nodes(id);
    for (var node of nodes) {
      var parent = node.parentElement;
      parent.removeChild(node);
      for (var j = 0; j < values.length; j++) {
        var clonedNode = node.cloneNode(true);
        var spruce = new SpruceTemplate(clonedNode);
        callback(j, values[j], spruce);
        parent.appendChild(clonedNode);
        var textNode = this._doc.createTextNode('\n');
        parent.appendChild(textNode);
      }
    }

    return this;
  }

  hide(id, isHide = true) {
    var nodes = this._nodes(id);
    for (var node of nodes) {
      if (isHide) {
        node.style.display = 'none';
      } else {
        node.style.display = null;
      }
    }
    return this;
  }

  show(id, isShow = true) {
    return this.hide(id, !isShow);
  }

  drop(id, isDrop = true) {
    if (!isDrop) return;

    var nodes = this._nodes(id);
    for (var node of nodes) {
      node.parentElement.removeChild(node);
    }

    return this;
  }

  load(id, spruceTemplate) {
    var html;
    if (spruceTemplate instanceof SpruceTemplate) {
      html = spruceTemplate._doc.body.innerHTML;
    } else {
      html = spruceTemplate.toString();
    }

    var nodes = this._nodes(id);
    for (var node of nodes) {
      node.setAttribute('data-s-loaded', 1);
      node.textContent = '';
      node.innerHTML = html;
    }
  }

  close() {
    this._html = this.html;
    this._doc.parentWindow.close();
    this._doc = null;
    return this;
  }

  get html() {
    if (!this._doc) return this._html;

    var nodes = this._doc.querySelectorAll('[data-s-loaded="1"]');
    for (var i = 0; i < nodes.length; i++) {
      nodes[i].removeAttribute('data-s-loaded');
    }

    if (this._isFragment) {
      var html = this._doc.body.innerHTML;
    } else {
      var html = this._doc.body.parentElement.outerHTML;
    }

    for (var i = 0; i < nodes.length; i++) {
      nodes[i].setAttribute('data-s-loaded', 1);
    }

    return html;
  }
}

//var fs = require('fs');
//var html = fs.readFileSync('sample.html', {encoding: 'utf-8'});
//
//var values = [{name: 'a', age: 12}, {name: 'b', age: 20}, {name: 'c', age: 30}];
//var s = new SpruceTemplate(html);
//s.text('title', 'Alice');
//s.attr('title', 'href', 'http://hoge.com');
//s.hide('title').show('title');
//s.load('title', new SpruceTemplate(html));
//s.loop('names', values, (i, v, s)=> s.text('name', v.name).text('age', v.age));
//console.log(s.take());
